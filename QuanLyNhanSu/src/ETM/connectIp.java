/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ETM;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Vi01
 */
public class connectIp extends javax.swing.JFrame {

    /**
     * Creates new form connectIp
     */
   
    
    public static String ip;
    public connectIp() {
        initComponents();
       SetCenter();
    }
    public void SetCenter()
    {
         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int height = screenSize.height;
        int width = screenSize.width;
        setBounds((width-400) / 2, (height-150) / 2, 400, 150);
        
        setIconImage((new ImageIcon("wire_transfer.png")).getImage());
    }
    private Socket connect() throws Exception {
        //1.client: tao socket ket noi den server cho phep ket noi o cong 8080
        String addip;
        addip = txtconnect.getText();
        //addip = "192.168.1.26";
        Socket sk = new Socket(addip, 9876);
        
        System.out.println("Client đã được tạo...");

        return sk;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtconnect = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Nhập Ip Server để kết nối");

        txtconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtconnectActionPerformed(evt);
            }
        });

        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/database_connect.png"))); // NOI18N
        btnConnect.setText("Connect Server");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtconnect)
                        .addGap(18, 18, 18)
                        .addComponent(btnConnect)
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private String connectToServer() throws Exception {

        Socket sk = connect();
        //3.3 tao luon ket noiw den sever
        DataOutputStream gui_server = new DataOutputStream(sk.getOutputStream());// tao luon gui di
        DataInputStream nhan_server = new DataInputStream(sk.getInputStream());// tao luon nhan vao

        gui_server.writeUTF("showAll");// gui du lieu len server

        String ketqua = nhan_server.readUTF();
        System.out.println("Client gửi:" + ketqua);//doc tu sever
        sk.close();

        return ketqua;
    }
public void EventConnect()
{
       Check c = new Check();
        if (!c.check_IP(txtconnect.getText())) {
         JOptionPane.showMessageDialog(this, "Nhập địa chỉ IP bị sai...yêu cầu nhập lại dạng 192.168.1.1  ", "Hãy nhập lại", JOptionPane.ERROR_MESSAGE);
         txtconnect.setText("");
         txtconnect.requestFocus();
                 
         }   else{
         
        try {
            String traloi = connectToServer();
            //handleReturnData(traloi);//result
            if (null != traloi && !traloi.equals("DBError")) {
                //thanh cong
               this.setVisible(false);
               
           LoginFrame login=new LoginFrame();
           login.lblAddress.setText(txtconnect.getText());
           login.setVisible(true);
            } else if (null != traloi && traloi.equals("DBError")) {
                JOptionPane.showMessageDialog(null, "Không thể kết nối đến database... ...");
            }
           //call login
           
        } catch (Exception e) {
            System.out.print(e);
            //JOptionPane.showMessageDialog(null, "CODE: 1002 -- Kết nối đến Server thất bại... ...");
            System.out.println("\nCODE: 1002 -- Kết nối đến Server thất bại... ...");
        }
        } 
}
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
         EventConnect();
    }//GEN-LAST:event_btnConnectActionPerformed

    private void txtconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtconnectActionPerformed
        // TODO add your handling code here:
        try {
            EventConnect();
           
        } catch (Exception e) {
            System.out.print(e);
            JOptionPane.showMessageDialog(null, "CODE: 1001 -- Kết nối thất bại... ...");
        }
    }//GEN-LAST:event_txtconnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(connectIp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(connectIp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(connectIp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(connectIp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new connectIp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtconnect;
    // End of variables declaration//GEN-END:variables
}
